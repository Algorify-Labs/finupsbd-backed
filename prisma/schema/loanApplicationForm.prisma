model LoanApplicationForm {
  id     String     @id @default(uuid())
  status LoanStatus @default(SUBMITTED)

  isActive      Boolean  @default(true)
  isDeleted     Boolean  @default(false)
  adminNotes    String?
  applicationId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String

  // all realarion in to other model 
  personalInfo           PersonalInfo?
  residentialInformation ResidentialInformation?
  employmentInformation  EmploymentInformation?
  loanInfo               LoanInfo?
  loanRequest            LoanRequest?
  GuarantorInfo          GuarantorInfo?
  PersonalGuarantor      PersonalGuarantor?      @relation(fields: [personalGuarantorId], references: [id])
  BusinessGuarantor      BusinessGuarantor?      @relation(fields: [businessGuarantorId], references: [id])
  personalGuarantorId    String?
  businessGuarantorId    String?

  @@index([applicationId, status, isActive, isDeleted])
  @@map("loanApplicationForm")
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------
model PersonalInfo {
  id                    String              @id @default(uuid())
  fullName              String
  fatherOrHusbandName   String
  motherName            String
  spouseName            String?
  dateOfBirth           DateTime
  placeOfBirth          String
  nationality           String
  gender                String
  maritalStatus         MaritalStatus
  educationalLevel      EduLavel
  identificationType    String
  identificationNumber  String
  religion              Religion
  residentialStatus     ResidentialStatus
  mobileNumber          String
  alternateMobileNumber String?
  emailAddress          String
  socialMediaProfiles   String[]
  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id])
  loanApplicationFormId String              @unique
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------

model ResidentialInformation {
  id                     String          @id @default(uuid())
  presentAddress         String
  presentDistrict        String
  presentDivision        String
  presentLengthOfStay    String
  presentOwnershipStatus OwnershipStatus
  presentPostalCode      String
  presentThana           String

  // If the permanent address is the same, set this to true and leave the fields below null
  isPermanentSameAsPresent Boolean          @default(false)
  permanentAddress         String?
  permanentDistrict        String?
  permanentDivision        String?
  permanentLengthOfStay    String?
  permanentOwnershipStatus OwnershipStatus?
  permanentThana           String?
  permanentPostalCode      String?

  // tie back to the loan application or user
  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id])
  loanApplicationFormId String              @unique
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------

model EmploymentInformation {
  id                  String   @id @default(uuid())
  employmentStatus    String
  jobTitle            String
  designation         String
  department          String
  employeeId          String
  employmentType      String
  dateOfJoining       DateTime
  organizationName    String
  organizationAddress String
  serviceYears        Int
  serviceMonths       Int
  eTin                String
  officialContact     String

  hasPreviousOrganization  Boolean
  previousOrganizationName String? // Optional
  previousDesignation      String? // Optional
  previousServiceYears     Int? // Optional
  previousServiceMonths    Int? // Optional

  totalExperienceYears  Int
  totalExperienceMonths Int

  propertyType  String
  propertyValue String

  grossMonthlyIncome String
  rentIncome         String?
  otherIncome        String?
  totalIncome        String

  /// Link back to the loan application (or user) record
  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id])
  loanApplicationFormId String              @unique
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------

model LoanInfo {
  id                    String              @id @default(uuid())
  hasCreditCard         Boolean
  hasExistingLoan       Boolean
  bankAccounts          BankAccount[]       @relation("LoanInfoBankAccount")
  creditCards           CreditCardUser[]    @relation("LoanInfoCreditCards")
  existingLoans         ExistingLoanUser[]  @relation("LoanInfoExistingLoans")
  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id])
  loanApplicationFormId String              @unique
}

model CreditCardUser {
  id                           String   @id @default(uuid())
  issuerName                   String
  cardLimit                    String
  toBeClosedBeforeDisbursement Boolean
  loanInfo                     LoanInfo @relation("LoanInfoCreditCards", fields: [loanInfoId], references: [id], onDelete: Cascade)
  loanInfoId                   String
}

model ExistingLoanUser {
  id                           String   @id @default(uuid())
  loanType                     LoanType
  otherLoanType                String?
  lenderName                   String
  outstandingAmount            Float
  monthlyEMI                   Float
  toBeClosedBeforeDisbursement Boolean
  loanInfo                     LoanInfo @relation("LoanInfoExistingLoans", fields: [loanInfoId], references: [id], onDelete: Cascade)
  loanInfoId                   String
}

model BankAccount {
  id            String @id @default(uuid())
  bankName      String
  accountNumber String

  loanInfo   LoanInfo @relation("LoanInfoBankAccount", fields: [loanInfoId], references: [id], onDelete: Cascade)
  loanInfoId String
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------

model LoanRequest {
  id                    String              @id @default(uuid())
  loanAmount            Decimal             @db.Decimal(10, 2)
  loanTenure            Int
  loanPurpose           String
  emiStartDate          Int // day of month when EMI begins
  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id], onDelete: Cascade)
  loanApplicationFormId String              @unique
}

/////-----------------------------------------------------------------------------------------------------------------------------------------------------------

model GuarantorInfo {
  id String @id @default(uuid())

  // Personal Guarantor Info
  personalGuarantor   PersonalGuarantor? @relation(fields: [personalGuarantorId], references: [id], onDelete: Cascade)
  personalGuarantorId String?            @unique

  // Business Guarantor Info
  businessGuarantor   BusinessGuarantor? @relation(fields: [businessGuarantorId], references: [id], onDelete: Cascade)
  businessGuarantorId String?            @unique

  loanApplicationForm   LoanApplicationForm @relation(fields: [loanApplicationFormId], references: [id], onDelete: Cascade)
  loanApplicationFormId String              @unique
}

model BusinessGuarantor {
  id           String @id @default(uuid())
  mobileNumber String
  emailAddress String

  guarantorInfo GuarantorInfo?

  LoanApplicationForm LoanApplicationForm[]
}

model PersonalGuarantor {
  id           String @id @default(uuid())
  mobileNumber String
  emailAddress String

  guarantorInfo GuarantorInfo?

  LoanApplicationForm LoanApplicationForm[]
}

/////------------------------------------------------------------------------------------------------------------------------------------------------------------
// /// Holds all details for a guarantor acting in a business capacity.
// model BusinessGuarantor {
//   id                    String                  @id @default(uuid())
//   fullName              String
//   fatherOrHusbandName   String
//   motherName            String
//   dateOfBirth           DateTime
//   emailAddress          String
//   mobileNumber          String
//   nationalIdNumber      String
//   nationality           String
//   permanentAddress      String
//   presentAddress        String
//   relationWithApplicant String
//   workAddress           String
//   document              GuarantorInfoDocument[]
//   /// Back-reference to the GuarantorInfo record
//   guarantorInfo         GuarantorInfo?
//   loanApplicationForm   LoanApplicationForm?    @relation(fields: [loanApplicationFormId], references: [id], onDelete: Cascade)
//   loanApplicationFormId String                  @unique
// }

// /// Holds all details for a guarantor acting in a personal capacity.
// model PersonalGuarantor {
//   id                    String                  @id @default(uuid())
//   fullName              String
//   fatherOrHusbandName   String
//   motherName            String
//   dateOfBirth           DateTime
//   emailAddress          String
//   mobileNumber          String
//   nationalIdNumber      String
//   nationality           String
//   permanentAddress      String
//   presentAddress        String
//   relationWithApplicant String
//   workAddress           String
//   document              GuarantorInfoDocument[]

//   /// Back-reference to the GuarantorInfo record
//   loanApplicationForm   LoanApplicationForm? @relation(fields: [loanApplicationFormId], references: [id], onDelete: Cascade)
//   loanApplicationFormId String               @unique
//   guarantorInfo         GuarantorInfo?
// }

// model GuarantorInfoDocument {
//   id                  String             @id @default(uuid())
//   secure_url          String
//   format              String
//   originalName        String
//   PersonalGuarantor   PersonalGuarantor? @relation(fields: [personalGuarantorId], references: [id])
//   personalGuarantorId String?
//   BusinessGuarantor   BusinessGuarantor? @relation(fields: [businessGuarantorId], references: [id])
//   businessGuarantorId String?
// }

/////------------------------------------------------------------------------------------------------------------------------------------------------------------

enum BusinessOwnerTypeLoan {
  PROPRIETORSHIP
  PARTNERSHIP
  LLC
  CORPORATION
  OTHER
}

enum BusinessType {
  WHOLESALE
  RETAIL
  SERVICES
  MANUFACTURING
  OTHER
}

enum IdentificationType {
  NID
  PASSPORT
}

enum ResidentialStatus {
  RESIDENT
  NONRESIDENT
  TEMPORARYRESIDENT
}

enum Religion {
  ISLAM
  HINDUISM
  CHRISTIANITY
  BUDDHISM
  OTHER
}

enum EduLavel {
  HIGHSCHOOL
  BACHELOR
  MASTER
  PHD
  OTHER
}

enum LoanStatus {
  SUBMITTED
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum OwnershipStatus {
  OWNED
  RENTED
  LEASED
  OTHER
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
  APARTMENT
  HOUSE
  OTHER
}

enum EmploymentStatus {
  SALARIED
  SELF_EMPLOYED
  BUSINESS_OWNER
}

enum LoanType {
  PERSONAL_LOAN
  HOME_LOAN
  CAR_LOAN
  SME_LOAN
  INSTANT_LOAN
}

enum DocumentType {
  PASSPORT_PHOTO
  NATIONAL_ID
  BIRTH_CERTIFICATE
  INCOME_PROOF
  BANK_STATEMENT
  TIN_CERTIFICATE
  EMPLOYMENT_PROOF
  UTILITY_BILL
  PROPERTY_DOCUMENT
  SUPPORTING_DOCUMENT
}
