model PersonalLoan {
    id            String       @id @default(uuid())
    bankName      String
    amount        String
    coverImage    String?
    periodMonths  String
    processingFee String
    interestRate  String
    monthlyEmi    String
    totalAmount   String
    eligibleLoan  String
    loanType      String       @default("PERSONAL_LOAN")
    isActive      Boolean      @default(true)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    eligibility   Eligibility?
    feesCharges   FeesCharges?
    features      Features?

    @@map("personalLoans")
}

model Features {
    id             String       @id @default(uuid())
    loanAmount     String
    minimumAmount  String
    maximumAmount  String
    loanTenure     String
    minimumYear    String
    maximumYear    String
    personalLoan   PersonalLoan @relation(fields: [personalLoanId], references: [id], onDelete: Cascade)
    personalLoanId String       @unique
}

model Eligibility {
    id                String       @id @default(uuid())
    condition         String
    offer             String
    minimumIncome     Int
    minimumExperience Int
    ageRequirement    Int
    personalLoan      PersonalLoan @relation(fields: [personalLoanId], references: [id], onDelete: Cascade)
    personalLoanId    String       @unique
}

model FeesCharges {
    id                  String       @id @default(uuid())
    processingFee       String
    earlySettlementFee  String
    prepaymentFee       String
    LoanReSchedulingFee String
    penalCharge         String
    personalLoan        PersonalLoan @relation(fields: [personalLoanId], references: [id], onDelete: Cascade)
    personalLoanId      String       @unique
}
